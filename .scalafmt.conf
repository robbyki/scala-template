version = "2.7.5"

maxColumn = 100
encoding = "UTF-8"
project.git = true
assumeStandardLibraryStripMargin = true
indentOperator.topLevelOnly = false

project {
  excludeFilters = [
  "target/.*"
  "project/target/.*"
  "dist/.*"
  ".git/.*"
  ]
}

project {
  includeFilters = [
    ".*.\\.scala$"
    ".*.\\.sc$"
    ".*\\.sbt$"
    ".*\\.worksheet"
  ]
}

continuationIndent {
  callSite = 2
  defnSite = 2
  extendSite = 2
  withSiteRelativeToExtends = 2
}

docstrings {
  style = "Asterisk"
  oneline = unfold
}

spaces {
  afterTripleEquals = true
  beforeContextBoundColon = IfMultipleBounds
}

verticalMultiline {
  atDefnSite = true
  arityThreshold = 5
  newlineAfterOpenParen = false
}

newlines {
  beforeMultiline = fold
  afterInfix=some
  afterCurlyLambdaParams = squash
  alwaysBeforeCurlyBraceLambdaParams = false
  alwaysBeforeElseAfterCurlyIf = false
  alwaysBeforeTopLevelStatements = true
  beforeCurlyLambdaParams = multilineWithCaseOnly
  implicitParamListModifierPrefer = before
  penalizeSingleSelectMultiArgList = false
  sometimesBeforeColonInMethodReturnType = false
  topLevelStatements = [before]
}

optIn {
  breakChainOnFirstMethodDot = true
  configStyleArguments = true
  annotationNewlines = true
}

binPack {
  literalsMinArgCount = 1
  parentConstructors = true
  literalArgumentLists = true
}

runner.optimizer {
  forceConfigStyleOnOffset = 80
  forceConfigStyleMinArgCount = 3
}

rewrite {
  redundantBraces.ifElseExpressions = true
  redundantBraces.stringInterpolation= true  
  rules = [PreferCurlyFors, RedundantBraces, RedundantParens, SortImports, SortModifiers, AvoidInfix]
}

align {
  preset = more
  openParenCallSite = false
  openParenDefnSite = false
  arrowEnumeratorGenerator = false
  tokens = [
    { code = "*>" }
    { code = "<*" }
    { code = "=>", owner = "Case" }
    { code = "⇒", owner = "Case" }
    { code = "extends", owner = "Defn.(Class|Trait|Object)" }
    { code = "//", owner = ".*" }
    { code = "{", owner = "Template" }
    { code = "}", owner = "Template" }
    { code = ":=", owner = "Term.ApplyInfix" }
    { code = "++=", owner = "Term.ApplyInfix" }
    { code = "+=", owner = "Term.ApplyInfix" }
    { code = "%", owner = "Term.ApplyInfix" }
    { code = "%%", owner = "Term.ApplyInfix" }
    { code = "%%%", owner = "Term.ApplyInfix" }
    { code = "->", owner = "Term.ApplyInfix" }
    { code = "→", owner = "Term.ApplyInfix" }
    { code = "<-", owner = "Enumerator.Generator" }
    { code = "←", owner = "Enumerator.Generator" }
    { code = "=", owner = "(Enumerator.Val|Defn.(Va(l|r)|Def|Type))" }
    { code = ":", owner = "(Enumerator.Val|Defn.(Va(l|r)|Def|Type))"}
  ]
}
